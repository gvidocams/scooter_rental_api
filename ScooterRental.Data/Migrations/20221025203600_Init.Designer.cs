// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScooterRental.Data;

namespace ScooterRental.Data.Migrations
{
    [DbContext(typeof(ScooterRentalDbContext))]
    [Migration("20221025203600_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("ScooterRental.Core.CrossTables.CompanyRentalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalDetailId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalCompanyId");

                    b.HasIndex("RentalDetailId");

                    b.ToTable("CompanyRentalDetails");
                });

            modelBuilder.Entity("ScooterRental.Core.CrossTables.CompanyScooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RentalCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScooterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RentalCompanyId");

                    b.HasIndex("ScooterId");

                    b.ToTable("CompaniesScooters");
                });

            modelBuilder.Entity("ScooterRental.Core.Models.RentalCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RentalCompanies");
                });

            modelBuilder.Entity("ScooterRental.Core.Models.RentalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerMinute")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScooterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RentalDetail");
                });

            modelBuilder.Entity("ScooterRental.Core.Models.Scooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRented")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerMinute")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Scooters");
                });

            modelBuilder.Entity("ScooterRental.Core.CrossTables.CompanyRentalDetail", b =>
                {
                    b.HasOne("ScooterRental.Core.Models.RentalCompany", "RentalCompany")
                        .WithMany()
                        .HasForeignKey("RentalCompanyId");

                    b.HasOne("ScooterRental.Core.Models.RentalDetail", "RentalDetail")
                        .WithMany()
                        .HasForeignKey("RentalDetailId");

                    b.Navigation("RentalCompany");

                    b.Navigation("RentalDetail");
                });

            modelBuilder.Entity("ScooterRental.Core.CrossTables.CompanyScooter", b =>
                {
                    b.HasOne("ScooterRental.Core.Models.RentalCompany", "RentalCompany")
                        .WithMany()
                        .HasForeignKey("RentalCompanyId");

                    b.HasOne("ScooterRental.Core.Models.Scooter", "Scooter")
                        .WithMany()
                        .HasForeignKey("ScooterId");

                    b.Navigation("RentalCompany");

                    b.Navigation("Scooter");
                });
#pragma warning restore 612, 618
        }
    }
}
